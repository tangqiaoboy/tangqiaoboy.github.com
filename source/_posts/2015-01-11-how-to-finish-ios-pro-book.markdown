---
layout: post
title: "我是如何完成《iOS开发进阶》的编写的？"
date: 2015-01-11 20:01:11 +0800
comments: true
categories: summary
---

## 前言

[《iOS 开发进阶》](https://github.com/tangqiaoboy/iOS-Pro) 终于出版了，在架构师峰会的签售会上，首批 100 本图书在签售的两天很快就卖光了，前几天首先在[互动出版社](http://product.china-pub.com/3770871)上架的首批图书也在一天内卖缺货了，能得到读者这么热烈地支持，我还是很惊喜。[技术人攻略](http://segmentfault.com/blog/devlevelup) 的创始人张兰说：“你应该写一篇总结”。我自己也想好好的整理一下这个出版的过程，给大家分享一下此书的写作过程。

{% img /images/ios-pro-book-launch.jpg %}

##选择出版社

去年年底，电子工业出版社博文视点的张春雨老师在微博上私信我，问我愿不愿意写一本 iOS 方面的技术书籍。其实在这之前已经有将近 5 个出版社的老师联系过我，但是我都因为创业太忙没有答应。后来有一次差点答应过的一个出版社老师，但因为她坚持要我提供 Word 版本的书稿以及一些沟通上的问题，我最终在签合同前终止了合作。

张老师是足够开明大度的，在写作时间和内容上给了我足够的自由度，前期几乎没有干涉过文稿内容和写作进度（不过后来发现其实是他比较忙，没空管我）。后期也仅仅是对文章表达可能有歧义的地方提建议。这种散养式的风格非常适合我，因为我从来就是一个比较自律，以及喜欢按自己节奏做事的人。

##写作格式和工具

我之前在某个出版社老师的要求下，曾经也尝试在 Mac 下用 Word 写作。但由于 Mac 下 Word 的糟糕体验以及对代码糟糕的排版支持，那完全就是一段不堪回首的痛苦过程。

而张春雨老师鼓励我用任何喜欢的工具写作，这一点是我同意合作的很大原因。我的博客都是用 markdown 语法来完成的，所以我一开始就打算用 markdown 来写作。

在软件上，我一开始选择 Mou 来写作，但是发现 Mou 对于篇幅超过 1 万字的文章，预览渲染会非常卡，CPU 长期达到 100% 占用。我的最新款 Macbook Air 的风扇呼呼狂响，让我不得不终止了 Mou 的进程。

之后有一段时间我就用 Evernote 或 Sublime text 来写作，它们麻烦之处就是 Evernote 写完之后还需要把图片转成 markdown 的链接。而
Sublime text 的问题就是无法方便地预览最后效果。

这一切的不便在我发现 [gitbook](https://www.gitbook.com/) 后被改变。[gitbook](https://www.gitbook.com/) 是一个专业的为 markdown 格式写作者提供的图书编写工具。它甚至集成了在线销售相关的功能。它也支持将书稿导出成 PDF、HTML 或 ePub 格式。

以下是 gitbook 的编辑界面（最左边是目录，中间是 markdown 源码，最右边是预览）：

{% img /images/gitbook-ui.jpg %}

我用 [gitbook](https://www.gitbook.com/) 完成了此书后半部分的编写。gitbook 有时候会出现两个中文字符在显示时重叠的问题，不过整体体验比 Mou 和 Evernote 要好多了。唯一的一次事故是 gitbook 对中文支持不太好，如果章节名不带中文的话，gitbook 会错误的地将章节覆盖到父级的图书目录，造成其他章节的内容被覆盖。我幸运的将书稿内容保存在了 Dropbox 目录下，所以恢复出来了。

##配图和示例代码

对于写作中需要的示意图截图，简单的我就直接用 QQ 截图了，复杂的我使用的是 [Clarify](http://www.clarify-it.com/)，它的标记功能比较丰富（不过中文支持比较差）。另外一些类图或架构图，我就直接使用 keynote 来做了。

考虑到技术书籍通常配图都比较少，所以我这次尝试，那时用比较多的配图来做辅助说明。另外我尽量把图书的涉及代码都放到网上，仅仅留一些关键的代码片段以节省篇幅。

##如何安排时间和控制进度

由于有过写作的经验，所以我预先就估计好了这会是一个一年左右的工作。实际上它确实花了一年时间。

我希望把这个当做一个自己的 “创业项目” 来做，看自己能否执行好一个较长远的规划。我把图书编写拆分成每一个章节的写作工作，然后希望用 1~2 周完成一个章节。这样的好处是每周都可以看到明确的进展和产出。

我具体在做的时候是尝试用 Scrum 的方式来安排自己周末的时间。简单来说就是把书稿的内容进行拆分，然后对于细分到每一个章节的内容进行估分。接着我的每一个周末的目标就是把当周安排的章节写作完成。

当然，人都是需要休息的。所以周末两天我通常不会安排满。我会安排一整天用来写作，而另外一天做小量的修改和休息。如果有加班，就暂停写作。

虽然我没有跑过马拉松，但我感觉写作的体验和跑马拉松类似。前期的起跑和最后的冲刺都比较激动，但是中途长达一年的写作过程却是孤独，枯燥和寂寞的。这个时候，需要自己的坚持和自我鼓励。

##关于电子版

该书我专门保留了电子版的版权，我本来希望把书放在多看上销售，主要是因为我个人就是多看的重度用户，而且我知道多看对电子书有加密保护。但是后来联系多看阅读时才发现他们已经不和个人作者合作了，他们建议我将版权授权给出版社。这让我感觉非常失望。多看阅读这种作法使得它无法颠覆传统出版社的渠道，另外如果竞争对手允许个人作者的话，多看阅读还可能失去不少优秀的图书的发行机会，进而影响它的电子书平台的地位。

在网上抱怨了此事以后，有一位朋友说可以协助我在豆瓣阅读发布此书。不过经过我试用之后，发现豆瓣的排版后台实在太难用，太花时间，所以我暂时放弃了发布电子版的事宜。

##关于作品收入

技术书籍的写作通常都是不怎么挣钱的。那拿我的书来说，估计版税一共会有2万块钱。而写作此书大概花掉了我将近一年的周末时间。如果是要专门为了挣钱的话，可以有非常多其它的性价比更高的，更轻松的方式。

但是，如果可以重来，我还是会选择写这本书。传递知识的乐趣和成就感还是比挣钱更有意思一些。也希望有更多的一线开发者投入到写作分享的行列中。

##一些小结

 * 推荐用 markdown 格式配合 [gitbook](https://www.gitbook.com/) 写作。
 * 推荐用 Scrum 的方式安排进度。
 * 推荐用 [Clarify](http://www.clarify-it.com/) 作配图标记。
 * 书稿放在 [Dropbox](https://www.dropbox.com/) 下自动同步会非常安全。当然，你需要学会科学上网。
 * 如果想在 Mac 下写作，那还是找一个不需要 Word 方式审稿的出版社吧，与我合作的电子工业出版社就是这样。博文视点的张春雨老师和刘芸老师(微信号:ly15201392806)都非常不错。
 * 从交稿到出版至少也有 1 个月时间，做好心理准备，前期不要宣传太猛，我这回从签售会到网上能够买到，将近过了一个月。我由于不懂事，签售时宣传得太狠，结果弄得跟饥饿营销似的。

##写作者的未来

未来互联网的发展会使得传播更加容易，所以我相信：好的内容会更容易获得读者，出版社和书商作为渠道的力量会越来越弱。到那个时候，或许写作真正的能成为很多人的职业，并给他们提供不菲的收入。

到那个时候，我希望我能够成为其中的一员，不但可以随意地选择工作时间和地点，还可以享受传递知识的乐趣和成就感，希望这一天能够早日到来。
